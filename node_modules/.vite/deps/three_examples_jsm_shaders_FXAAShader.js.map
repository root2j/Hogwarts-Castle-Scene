{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/FXAAShader.js"],
  "sourcesContent": ["import {\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * NVIDIA FXAA by Timothy Lottes\r\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\r\n * - WebGL port by @supereggbert\r\n * http://www.glge.org/demos/fxaa/\r\n */\r\n\r\nconst FXAAShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'resolution': { value: new Vector2( 1 / 1024, 1 / 512 ) }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader:\r\n\r\n\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\r\n\r\n\t//----------------------------------------------------------------------------------\r\n\t// File:\t\t\t\tes3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\r\n\t// SDK Version: v3.00\r\n\t// Email:\t\t\t gameworks@nvidia.com\r\n\t// Site:\t\t\t\thttp://developer.nvidia.com/\r\n\t//\r\n\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\r\n\t//\r\n\t// Redistribution and use in source and binary forms, with or without\r\n\t// modification, are permitted provided that the following conditions\r\n\t// are met:\r\n\t//\t* Redistributions of source code must retain the above copyright\r\n\t//\t\tnotice, this list of conditions and the following disclaimer.\r\n\t//\t* Redistributions in binary form must reproduce the above copyright\r\n\t//\t\tnotice, this list of conditions and the following disclaimer in the\r\n\t//\t\tdocumentation and/or other materials provided with the distribution.\r\n\t//\t* Neither the name of NVIDIA CORPORATION nor the names of its\r\n\t//\t\tcontributors may be used to endorse or promote products derived\r\n\t//\t\tfrom this software without specific prior written permission.\r\n\t//\r\n\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS\\'\\' AND ANY\r\n\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n\t// PURPOSE ARE DISCLAIMED.\tIN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\r\n\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\t//\r\n\t//----------------------------------------------------------------------------------\r\n\r\n\t\t/* glsl */`\r\n\r\n\t\tprecision highp float;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tuniform vec2 resolution;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\t#define FXAA_PC 1\r\n\t\t#define FXAA_GLSL_100 1\r\n\t\t#define FXAA_QUALITY_PRESET 12\r\n\r\n\t\t#define FXAA_GREEN_AS_LUMA 1\r\n\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_PC_CONSOLE\r\n\t\t\t\t//\r\n\t\t\t\t// The console algorithm for PC is included\r\n\t\t\t\t// for developers targeting really low spec machines.\r\n\t\t\t\t// Likely better to just run FXAA_PC, and use a really low preset.\r\n\t\t\t\t//\r\n\t\t\t\t#define FXAA_PC_CONSOLE 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_GLSL_120\r\n\t\t\t\t#define FXAA_GLSL_120 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_GLSL_130\r\n\t\t\t\t#define FXAA_GLSL_130 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_HLSL_3\r\n\t\t\t\t#define FXAA_HLSL_3 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_HLSL_4\r\n\t\t\t\t#define FXAA_HLSL_4 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_HLSL_5\r\n\t\t\t\t#define FXAA_HLSL_5 0\r\n\t\t#endif\r\n\t\t/*==========================================================================*/\r\n\t\t#ifndef FXAA_GREEN_AS_LUMA\r\n\t\t\t\t//\r\n\t\t\t\t// For those using non-linear color,\r\n\t\t\t\t// and either not able to get luma in alpha, or not wanting to,\r\n\t\t\t\t// this enables FXAA to run using green as a proxy for luma.\r\n\t\t\t\t// So with this enabled, no need to pack luma in alpha.\r\n\t\t\t\t//\r\n\t\t\t\t// This will turn off AA on anything which lacks some amount of green.\r\n\t\t\t\t// Pure red and blue or combination of only R and B, will get no AA.\r\n\t\t\t\t//\r\n\t\t\t\t// Might want to lower the settings for both,\r\n\t\t\t\t//\t\tfxaaConsoleEdgeThresholdMin\r\n\t\t\t\t//\t\tfxaaQualityEdgeThresholdMin\r\n\t\t\t\t// In order to insure AA does not get turned off on colors\r\n\t\t\t\t// which contain a minor amount of green.\r\n\t\t\t\t//\r\n\t\t\t\t// 1 = On.\r\n\t\t\t\t// 0 = Off.\r\n\t\t\t\t//\r\n\t\t\t\t#define FXAA_GREEN_AS_LUMA 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_EARLY_EXIT\r\n\t\t\t\t//\r\n\t\t\t\t// Controls algorithm\\'s early exit path.\r\n\t\t\t\t// On PS3 turning this ON adds 2 cycles to the shader.\r\n\t\t\t\t// On 360 turning this OFF adds 10ths of a millisecond to the shader.\r\n\t\t\t\t// Turning this off on console will result in a more blurry image.\r\n\t\t\t\t// So this defaults to on.\r\n\t\t\t\t//\r\n\t\t\t\t// 1 = On.\r\n\t\t\t\t// 0 = Off.\r\n\t\t\t\t//\r\n\t\t\t\t#define FXAA_EARLY_EXIT 1\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_DISCARD\r\n\t\t\t\t//\r\n\t\t\t\t// Only valid for PC OpenGL currently.\r\n\t\t\t\t// Probably will not work when FXAA_GREEN_AS_LUMA = 1.\r\n\t\t\t\t//\r\n\t\t\t\t// 1 = Use discard on pixels which don\\'t need AA.\r\n\t\t\t\t//\t\t For APIs which enable concurrent TEX+ROP from same surface.\r\n\t\t\t\t// 0 = Return unchanged color on pixels which don\\'t need AA.\r\n\t\t\t\t//\r\n\t\t\t\t#define FXAA_DISCARD 0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_FAST_PIXEL_OFFSET\r\n\t\t\t\t//\r\n\t\t\t\t// Used for GLSL 120 only.\r\n\t\t\t\t//\r\n\t\t\t\t// 1 = GL API supports fast pixel offsets\r\n\t\t\t\t// 0 = do not use fast pixel offsets\r\n\t\t\t\t//\r\n\t\t\t\t#ifdef GL_EXT_gpu_shader4\r\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifdef GL_NV_gpu_shader5\r\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifdef GL_ARB_gpu_shader5\r\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifndef FXAA_FAST_PIXEL_OFFSET\r\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 0\r\n\t\t\t\t#endif\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#ifndef FXAA_GATHER4_ALPHA\r\n\t\t\t\t//\r\n\t\t\t\t// 1 = API supports gather4 on alpha channel.\r\n\t\t\t\t// 0 = API does not support gather4 on alpha channel.\r\n\t\t\t\t//\r\n\t\t\t\t#if (FXAA_HLSL_5 == 1)\r\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifdef GL_ARB_gpu_shader5\r\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifdef GL_NV_gpu_shader5\r\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\r\n\t\t\t\t#endif\r\n\t\t\t\t#ifndef FXAA_GATHER4_ALPHA\r\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 0\r\n\t\t\t\t#endif\r\n\t\t#endif\r\n\r\n\r\n\t\t/*============================================================================\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFXAA QUALITY - TUNING KNOBS\r\n\t\t------------------------------------------------------------------------------\r\n\t\tNOTE the other tuning knobs are now in the shader function inputs!\r\n\t\t============================================================================*/\r\n\t\t#ifndef FXAA_QUALITY_PRESET\r\n\t\t\t\t//\r\n\t\t\t\t// Choose the quality preset.\r\n\t\t\t\t// This needs to be compiled into the shader as it effects code.\r\n\t\t\t\t// Best option to include multiple presets is to\r\n\t\t\t\t// in each shader define the preset, then include this file.\r\n\t\t\t\t//\r\n\t\t\t\t// OPTIONS\r\n\t\t\t\t// -----------------------------------------------------------------------\r\n\t\t\t\t// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\r\n\t\t\t\t// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\r\n\t\t\t\t// 39\t\t\t - no dither, very expensive\r\n\t\t\t\t//\r\n\t\t\t\t// NOTES\r\n\t\t\t\t// -----------------------------------------------------------------------\r\n\t\t\t\t// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\r\n\t\t\t\t// 13 = about same speed as FXAA 3.9 and better than 12\r\n\t\t\t\t// 23 = closest to FXAA 3.9 visually and performance wise\r\n\t\t\t\t//\t_ = the lowest digit is directly related to performance\r\n\t\t\t\t// _\t= the highest digit is directly related to style\r\n\t\t\t\t//\r\n\t\t\t\t#define FXAA_QUALITY_PRESET 12\r\n\t\t#endif\r\n\r\n\r\n\t\t/*============================================================================\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - PRESETS\r\n\r\n\t\t============================================================================*/\r\n\r\n\t\t/*============================================================================\r\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - MEDIUM DITHER PRESETS\r\n\t\t============================================================================*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 10)\r\n\t\t\t\t#define FXAA_QUALITY_PS 3\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P1 3.0\r\n\t\t\t\t#define FXAA_QUALITY_P2 12.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 11)\r\n\t\t\t\t#define FXAA_QUALITY_PS 4\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 3.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 12.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 12)\r\n\t\t\t\t#define FXAA_QUALITY_PS 5\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 12.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 13)\r\n\t\t\t\t#define FXAA_QUALITY_PS 6\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 12.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 14)\r\n\t\t\t\t#define FXAA_QUALITY_PS 7\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 12.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 15)\r\n\t\t\t\t#define FXAA_QUALITY_PS 8\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 12.0\r\n\t\t#endif\r\n\r\n\t\t/*============================================================================\r\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - LOW DITHER PRESETS\r\n\t\t============================================================================*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 20)\r\n\t\t\t\t#define FXAA_QUALITY_PS 3\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P1 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P2 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 21)\r\n\t\t\t\t#define FXAA_QUALITY_PS 4\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 22)\r\n\t\t\t\t#define FXAA_QUALITY_PS 5\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 23)\r\n\t\t\t\t#define FXAA_QUALITY_PS 6\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 24)\r\n\t\t\t\t#define FXAA_QUALITY_PS 7\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 3.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 25)\r\n\t\t\t\t#define FXAA_QUALITY_PS 8\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 26)\r\n\t\t\t\t#define FXAA_QUALITY_PS 9\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P8 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 27)\r\n\t\t\t\t#define FXAA_QUALITY_PS 10\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P8 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P9 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 28)\r\n\t\t\t\t#define FXAA_QUALITY_PS 11\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P9 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P10 8.0\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 29)\r\n\t\t\t\t#define FXAA_QUALITY_PS 12\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P9 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P10 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P11 8.0\r\n\t\t#endif\r\n\r\n\t\t/*============================================================================\r\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - EXTREME QUALITY\r\n\t\t============================================================================*/\r\n\t\t#if (FXAA_QUALITY_PRESET == 39)\r\n\t\t\t\t#define FXAA_QUALITY_PS 12\r\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P1 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P2 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P3 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P4 1.0\r\n\t\t\t\t#define FXAA_QUALITY_P5 1.5\r\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P9 2.0\r\n\t\t\t\t#define FXAA_QUALITY_P10 4.0\r\n\t\t\t\t#define FXAA_QUALITY_P11 8.0\r\n\t\t#endif\r\n\r\n\r\n\r\n\t\t/*============================================================================\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAPI PORTING\r\n\r\n\t\t============================================================================*/\r\n\t\t#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\r\n\t\t\t\t#define FxaaBool bool\r\n\t\t\t\t#define FxaaDiscard discard\r\n\t\t\t\t#define FxaaFloat float\r\n\t\t\t\t#define FxaaFloat2 vec2\r\n\t\t\t\t#define FxaaFloat3 vec3\r\n\t\t\t\t#define FxaaFloat4 vec4\r\n\t\t\t\t#define FxaaHalf float\r\n\t\t\t\t#define FxaaHalf2 vec2\r\n\t\t\t\t#define FxaaHalf3 vec3\r\n\t\t\t\t#define FxaaHalf4 vec4\r\n\t\t\t\t#define FxaaInt2 ivec2\r\n\t\t\t\t#define FxaaSat(x) clamp(x, 0.0, 1.0)\r\n\t\t\t\t#define FxaaTex sampler2D\r\n\t\t#else\r\n\t\t\t\t#define FxaaBool bool\r\n\t\t\t\t#define FxaaDiscard clip(-1)\r\n\t\t\t\t#define FxaaFloat float\r\n\t\t\t\t#define FxaaFloat2 float2\r\n\t\t\t\t#define FxaaFloat3 float3\r\n\t\t\t\t#define FxaaFloat4 float4\r\n\t\t\t\t#define FxaaHalf half\r\n\t\t\t\t#define FxaaHalf2 half2\r\n\t\t\t\t#define FxaaHalf3 half3\r\n\t\t\t\t#define FxaaHalf4 half4\r\n\t\t\t\t#define FxaaSat(x) saturate(x)\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_GLSL_100 == 1)\r\n\t\t\t#define FxaaTexTop(t, p) texture2D(t, p, 0.0)\r\n\t\t\t#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_GLSL_120 == 1)\r\n\t\t\t\t// Requires,\r\n\t\t\t\t//\t#version 120\r\n\t\t\t\t// And at least,\r\n\t\t\t\t//\t#extension GL_EXT_gpu_shader4 : enable\r\n\t\t\t\t//\t(or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\r\n\t\t\t\t#define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\r\n\t\t\t\t#if (FXAA_FAST_PIXEL_OFFSET == 1)\r\n\t\t\t\t\t\t#define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\r\n\t\t\t\t#else\r\n\t\t\t\t\t\t#define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\r\n\t\t\t\t#endif\r\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\r\n\t\t\t\t\t\t// use #extension GL_ARB_gpu_shader5 : enable\r\n\t\t\t\t\t\t#define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\r\n\t\t\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\r\n\t\t\t\t\t\t#define FxaaTexGreen4(t, p) textureGather(t, p, 1)\r\n\t\t\t\t\t\t#define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\r\n\t\t\t\t#endif\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_GLSL_130 == 1)\r\n\t\t\t\t// Requires \"#version 130\" or better\r\n\t\t\t\t#define FxaaTexTop(t, p) textureLod(t, p, 0.0)\r\n\t\t\t\t#define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\r\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\r\n\t\t\t\t\t\t// use #extension GL_ARB_gpu_shader5 : enable\r\n\t\t\t\t\t\t#define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\r\n\t\t\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\r\n\t\t\t\t\t\t#define FxaaTexGreen4(t, p) textureGather(t, p, 1)\r\n\t\t\t\t\t\t#define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\r\n\t\t\t\t#endif\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_HLSL_3 == 1)\r\n\t\t\t\t#define FxaaInt2 float2\r\n\t\t\t\t#define FxaaTex sampler2D\r\n\t\t\t\t#define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\r\n\t\t\t\t#define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_HLSL_4 == 1)\r\n\t\t\t\t#define FxaaInt2 int2\r\n\t\t\t\tstruct FxaaTex { SamplerState smpl; Texture2D tex; };\r\n\t\t\t\t#define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\r\n\t\t\t\t#define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\r\n\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t#if (FXAA_HLSL_5 == 1)\r\n\t\t\t\t#define FxaaInt2 int2\r\n\t\t\t\tstruct FxaaTex { SamplerState smpl; Texture2D tex; };\r\n\t\t\t\t#define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\r\n\t\t\t\t#define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\r\n\t\t\t\t#define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\r\n\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\r\n\t\t\t\t#define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\r\n\t\t\t\t#define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\r\n\t\t#endif\r\n\r\n\r\n\t\t/*============================================================================\r\n\t\t\t\t\t\t\t\t\t\t\t GREEN AS LUMA OPTION SUPPORT FUNCTION\r\n\t\t============================================================================*/\r\n\t\t#if (FXAA_GREEN_AS_LUMA == 0)\r\n\t\t\t\tFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\r\n\t\t#else\r\n\t\t\t\tFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\r\n\t\t#endif\r\n\r\n\r\n\r\n\r\n\t\t/*============================================================================\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FXAA3 QUALITY - PC\r\n\r\n\t\t============================================================================*/\r\n\t\t#if (FXAA_PC == 1)\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\tFxaaFloat4 FxaaPixelShader(\r\n\t\t\t\t//\r\n\t\t\t\t// Use noperspective interpolation here (turn off perspective interpolation).\r\n\t\t\t\t// {xy} = center of pixel\r\n\t\t\t\tFxaaFloat2 pos,\r\n\t\t\t\t//\r\n\t\t\t\t// Used only for FXAA Console, and not used on the 360 version.\r\n\t\t\t\t// Use noperspective interpolation here (turn off perspective interpolation).\r\n\t\t\t\t// {xy_} = upper left of pixel\r\n\t\t\t\t// {_zw} = lower right of pixel\r\n\t\t\t\tFxaaFloat4 fxaaConsolePosPos,\r\n\t\t\t\t//\r\n\t\t\t\t// Input color texture.\r\n\t\t\t\t// {rgb_} = color in linear or perceptual color space\r\n\t\t\t\t// if (FXAA_GREEN_AS_LUMA == 0)\r\n\t\t\t\t//\t\t {__a} = luma in perceptual color space (not linear)\r\n\t\t\t\tFxaaTex tex,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on the optimized 360 version of FXAA Console.\r\n\t\t\t\t// For everything but 360, just use the same input here as for \"tex\".\r\n\t\t\t\t// For 360, same texture, just alias with a 2nd sampler.\r\n\t\t\t\t// This sampler needs to have an exponent bias of -1.\r\n\t\t\t\tFxaaTex fxaaConsole360TexExpBiasNegOne,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on the optimized 360 version of FXAA Console.\r\n\t\t\t\t// For everything but 360, just use the same input here as for \"tex\".\r\n\t\t\t\t// For 360, same texture, just alias with a 3nd sampler.\r\n\t\t\t\t// This sampler needs to have an exponent bias of -2.\r\n\t\t\t\tFxaaTex fxaaConsole360TexExpBiasNegTwo,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Quality.\r\n\t\t\t\t// This must be from a constant/uniform.\r\n\t\t\t\t// {x_} = 1.0/screenWidthInPixels\r\n\t\t\t\t// {_y} = 1.0/screenHeightInPixels\r\n\t\t\t\tFxaaFloat2 fxaaQualityRcpFrame,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Console.\r\n\t\t\t\t// This must be from a constant/uniform.\r\n\t\t\t\t// This effects sub-pixel AA quality and inversely sharpness.\r\n\t\t\t\t//\t Where N ranges between,\r\n\t\t\t\t//\t\t N = 0.50 (default)\r\n\t\t\t\t//\t\t N = 0.33 (sharper)\r\n\t\t\t\t// {x__} = -N/screenWidthInPixels\r\n\t\t\t\t// {_y_} = -N/screenHeightInPixels\r\n\t\t\t\t// {_z_} =\tN/screenWidthInPixels\r\n\t\t\t\t// {__w} =\tN/screenHeightInPixels\r\n\t\t\t\tFxaaFloat4 fxaaConsoleRcpFrameOpt,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Console.\r\n\t\t\t\t// Not used on 360, but used on PS3 and PC.\r\n\t\t\t\t// This must be from a constant/uniform.\r\n\t\t\t\t// {x__} = -2.0/screenWidthInPixels\r\n\t\t\t\t// {_y_} = -2.0/screenHeightInPixels\r\n\t\t\t\t// {_z_} =\t2.0/screenWidthInPixels\r\n\t\t\t\t// {__w} =\t2.0/screenHeightInPixels\r\n\t\t\t\tFxaaFloat4 fxaaConsoleRcpFrameOpt2,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Console.\r\n\t\t\t\t// Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\r\n\t\t\t\t// This must be from a constant/uniform.\r\n\t\t\t\t// {x__} =\t8.0/screenWidthInPixels\r\n\t\t\t\t// {_y_} =\t8.0/screenHeightInPixels\r\n\t\t\t\t// {_z_} = -4.0/screenWidthInPixels\r\n\t\t\t\t// {__w} = -4.0/screenHeightInPixels\r\n\t\t\t\tFxaaFloat4 fxaaConsole360RcpFrameOpt2,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Quality.\r\n\t\t\t\t// This used to be the FXAA_QUALITY_SUBPIX define.\r\n\t\t\t\t// It is here now to allow easier tuning.\r\n\t\t\t\t// Choose the amount of sub-pixel aliasing removal.\r\n\t\t\t\t// This can effect sharpness.\r\n\t\t\t\t//\t 1.00 - upper limit (softer)\r\n\t\t\t\t//\t 0.75 - default amount of filtering\r\n\t\t\t\t//\t 0.50 - lower limit (sharper, less sub-pixel aliasing removal)\r\n\t\t\t\t//\t 0.25 - almost off\r\n\t\t\t\t//\t 0.00 - completely off\r\n\t\t\t\tFxaaFloat fxaaQualitySubpix,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Quality.\r\n\t\t\t\t// This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\r\n\t\t\t\t// It is here now to allow easier tuning.\r\n\t\t\t\t// The minimum amount of local contrast required to apply algorithm.\r\n\t\t\t\t//\t 0.333 - too little (faster)\r\n\t\t\t\t//\t 0.250 - low quality\r\n\t\t\t\t//\t 0.166 - default\r\n\t\t\t\t//\t 0.125 - high quality\r\n\t\t\t\t//\t 0.063 - overkill (slower)\r\n\t\t\t\tFxaaFloat fxaaQualityEdgeThreshold,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Quality.\r\n\t\t\t\t// This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\r\n\t\t\t\t// It is here now to allow easier tuning.\r\n\t\t\t\t// Trims the algorithm from processing darks.\r\n\t\t\t\t//\t 0.0833 - upper limit (default, the start of visible unfiltered edges)\r\n\t\t\t\t//\t 0.0625 - high quality (faster)\r\n\t\t\t\t//\t 0.0312 - visible limit (slower)\r\n\t\t\t\t// Special notes when using FXAA_GREEN_AS_LUMA,\r\n\t\t\t\t//\t Likely want to set this to zero.\r\n\t\t\t\t//\t As colors that are mostly not-green\r\n\t\t\t\t//\t will appear very dark in the green channel!\r\n\t\t\t\t//\t Tune by looking at mostly non-green content,\r\n\t\t\t\t//\t then start at zero and increase until aliasing is a problem.\r\n\t\t\t\tFxaaFloat fxaaQualityEdgeThresholdMin,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Console.\r\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\r\n\t\t\t\t// It is here now to allow easier tuning.\r\n\t\t\t\t// This does not effect PS3, as this needs to be compiled in.\r\n\t\t\t\t//\t Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\r\n\t\t\t\t//\t Due to the PS3 being ALU bound,\r\n\t\t\t\t//\t there are only three safe values here: 2 and 4 and 8.\r\n\t\t\t\t//\t These options use the shaders ability to a free *|/ by 2|4|8.\r\n\t\t\t\t// For all other platforms can be a non-power of two.\r\n\t\t\t\t//\t 8.0 is sharper (default!!!)\r\n\t\t\t\t//\t 4.0 is softer\r\n\t\t\t\t//\t 2.0 is really soft (good only for vector graphics inputs)\r\n\t\t\t\tFxaaFloat fxaaConsoleEdgeSharpness,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Console.\r\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\r\n\t\t\t\t// It is here now to allow easier tuning.\r\n\t\t\t\t// This does not effect PS3, as this needs to be compiled in.\r\n\t\t\t\t//\t Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\r\n\t\t\t\t//\t Due to the PS3 being ALU bound,\r\n\t\t\t\t//\t there are only two safe values here: 1/4 and 1/8.\r\n\t\t\t\t//\t These options use the shaders ability to a free *|/ by 2|4|8.\r\n\t\t\t\t// The console setting has a different mapping than the quality setting.\r\n\t\t\t\t// Other platforms can use other values.\r\n\t\t\t\t//\t 0.125 leaves less aliasing, but is softer (default!!!)\r\n\t\t\t\t//\t 0.25 leaves more aliasing, and is sharper\r\n\t\t\t\tFxaaFloat fxaaConsoleEdgeThreshold,\r\n\t\t\t\t//\r\n\t\t\t\t// Only used on FXAA Console.\r\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\r\n\t\t\t\t// It is here now to allow easier tuning.\r\n\t\t\t\t// Trims the algorithm from processing darks.\r\n\t\t\t\t// The console setting has a different mapping than the quality setting.\r\n\t\t\t\t// This only applies when FXAA_EARLY_EXIT is 1.\r\n\t\t\t\t// This does not apply to PS3,\r\n\t\t\t\t// PS3 was simplified to avoid more shader instructions.\r\n\t\t\t\t//\t 0.06 - faster but more aliasing in darks\r\n\t\t\t\t//\t 0.05 - default\r\n\t\t\t\t//\t 0.04 - slower and less aliasing in darks\r\n\t\t\t\t// Special notes when using FXAA_GREEN_AS_LUMA,\r\n\t\t\t\t//\t Likely want to set this to zero.\r\n\t\t\t\t//\t As colors that are mostly not-green\r\n\t\t\t\t//\t will appear very dark in the green channel!\r\n\t\t\t\t//\t Tune by looking at mostly non-green content,\r\n\t\t\t\t//\t then start at zero and increase until aliasing is a problem.\r\n\t\t\t\tFxaaFloat fxaaConsoleEdgeThresholdMin,\r\n\t\t\t\t//\r\n\t\t\t\t// Extra constants for 360 FXAA Console only.\r\n\t\t\t\t// Use zeros or anything else for other platforms.\r\n\t\t\t\t// These must be in physical constant registers and NOT immediates.\r\n\t\t\t\t// Immediates will result in compiler un-optimizing.\r\n\t\t\t\t// {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\r\n\t\t\t\tFxaaFloat4 fxaaConsole360ConstDir\r\n\t\t) {\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat2 posM;\r\n\t\t\t\tposM.x = pos.x;\r\n\t\t\t\tposM.y = pos.y;\r\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\r\n\t\t\t\t\t\t#if (FXAA_DISCARD == 0)\r\n\t\t\t\t\t\t\t\tFxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\r\n\t\t\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\r\n\t\t\t\t\t\t\t\t\t\t#define lumaM rgbyM.w\r\n\t\t\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\t\t\t#define lumaM rgbyM.y\r\n\t\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\r\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\r\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\r\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t#if (FXAA_DISCARD == 1)\r\n\t\t\t\t\t\t\t\t#define lumaM luma4A.w\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t#define lumaE luma4A.z\r\n\t\t\t\t\t\t#define lumaS luma4A.x\r\n\t\t\t\t\t\t#define lumaSE luma4A.y\r\n\t\t\t\t\t\t#define lumaNW luma4B.w\r\n\t\t\t\t\t\t#define lumaN luma4B.z\r\n\t\t\t\t\t\t#define lumaW luma4B.x\r\n\t\t\t\t#else\r\n\t\t\t\t\t\tFxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\r\n\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\r\n\t\t\t\t\t\t\t\t#define lumaM rgbyM.w\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\t#define lumaM rgbyM.y\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t#if (FXAA_GLSL_100 == 1)\r\n\t\t\t\t\t\t\tFxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\tFxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat maxSM = max(lumaS, lumaM);\r\n\t\t\t\tFxaaFloat minSM = min(lumaS, lumaM);\r\n\t\t\t\tFxaaFloat maxESM = max(lumaE, maxSM);\r\n\t\t\t\tFxaaFloat minESM = min(lumaE, minSM);\r\n\t\t\t\tFxaaFloat maxWN = max(lumaN, lumaW);\r\n\t\t\t\tFxaaFloat minWN = min(lumaN, lumaW);\r\n\t\t\t\tFxaaFloat rangeMax = max(maxWN, maxESM);\r\n\t\t\t\tFxaaFloat rangeMin = min(minWN, minESM);\r\n\t\t\t\tFxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\r\n\t\t\t\tFxaaFloat range = rangeMax - rangeMin;\r\n\t\t\t\tFxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\r\n\t\t\t\tFxaaBool earlyExit = range < rangeMaxClamped;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tif(earlyExit)\r\n\t\t\t\t\t\t#if (FXAA_DISCARD == 1)\r\n\t\t\t\t\t\t\t\tFxaaDiscard;\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\treturn rgbyM;\r\n\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 0)\r\n\t\t\t\t\t\t#if (FXAA_GLSL_100 == 1)\r\n\t\t\t\t\t\t\tFxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\tFxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t#else\r\n\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\r\n\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat lumaNS = lumaN + lumaS;\r\n\t\t\t\tFxaaFloat lumaWE = lumaW + lumaE;\r\n\t\t\t\tFxaaFloat subpixRcpRange = 1.0/range;\r\n\t\t\t\tFxaaFloat subpixNSWE = lumaNS + lumaWE;\r\n\t\t\t\tFxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\r\n\t\t\t\tFxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat lumaNESE = lumaNE + lumaSE;\r\n\t\t\t\tFxaaFloat lumaNWNE = lumaNW + lumaNE;\r\n\t\t\t\tFxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\r\n\t\t\t\tFxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat lumaNWSW = lumaNW + lumaSW;\r\n\t\t\t\tFxaaFloat lumaSWSE = lumaSW + lumaSE;\r\n\t\t\t\tFxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\r\n\t\t\t\tFxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\r\n\t\t\t\tFxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\r\n\t\t\t\tFxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\r\n\t\t\t\tFxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\r\n\t\t\t\tFxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\r\n\t\t\t\tFxaaFloat lengthSign = fxaaQualityRcpFrame.x;\r\n\t\t\t\tFxaaBool horzSpan = edgeHorz >= edgeVert;\r\n\t\t\t\tFxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tif(!horzSpan) lumaN = lumaW;\r\n\t\t\t\tif(!horzSpan) lumaS = lumaE;\r\n\t\t\t\tif(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\r\n\t\t\t\tFxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat gradientN = lumaN - lumaM;\r\n\t\t\t\tFxaaFloat gradientS = lumaS - lumaM;\r\n\t\t\t\tFxaaFloat lumaNN = lumaN + lumaM;\r\n\t\t\t\tFxaaFloat lumaSS = lumaS + lumaM;\r\n\t\t\t\tFxaaBool pairN = abs(gradientN) >= abs(gradientS);\r\n\t\t\t\tFxaaFloat gradient = max(abs(gradientN), abs(gradientS));\r\n\t\t\t\tif(pairN) lengthSign = -lengthSign;\r\n\t\t\t\tFxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat2 posB;\r\n\t\t\t\tposB.x = posM.x;\r\n\t\t\t\tposB.y = posM.y;\r\n\t\t\t\tFxaaFloat2 offNP;\r\n\t\t\t\toffNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\r\n\t\t\t\toffNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\r\n\t\t\t\tif(!horzSpan) posB.x += lengthSign * 0.5;\r\n\t\t\t\tif( horzSpan) posB.y += lengthSign * 0.5;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat2 posN;\r\n\t\t\t\tposN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\r\n\t\t\t\tposN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\r\n\t\t\t\tFxaaFloat2 posP;\r\n\t\t\t\tposP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\r\n\t\t\t\tposP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\r\n\t\t\t\tFxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\r\n\t\t\t\tFxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\r\n\t\t\t\tFxaaFloat subpixE = subpixC * subpixC;\r\n\t\t\t\tFxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tif(!pairN) lumaNN = lumaSS;\r\n\t\t\t\tFxaaFloat gradientScaled = gradient * 1.0/4.0;\r\n\t\t\t\tFxaaFloat lumaMM = lumaM - lumaNN * 0.5;\r\n\t\t\t\tFxaaFloat subpixF = subpixD * subpixE;\r\n\t\t\t\tFxaaBool lumaMLTZero = lumaMM < 0.0;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tlumaEndN -= lumaNN * 0.5;\r\n\t\t\t\tlumaEndP -= lumaNN * 0.5;\r\n\t\t\t\tFxaaBool doneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\tFxaaBool doneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\r\n\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\r\n\t\t\t\tFxaaBool doneNP = (!doneN) || (!doneP);\r\n\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\r\n\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\r\n\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\r\n\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\r\n\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 3)\r\n\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\r\n\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\r\n\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\r\n\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 4)\r\n\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\r\n\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 5)\r\n\t\t\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 6)\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 7)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t#if (FXAA_QUALITY_PS > 8)\r\n\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\r\n\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\r\n\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\r\n\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 9)\r\n\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\r\n\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\r\n\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\r\n\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 10)\r\n\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\r\n\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\r\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 11)\r\n\t\t\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\r\n\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 12)\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t}\r\n\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t#endif\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\t}\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat dstN = posM.x - posN.x;\r\n\t\t\t\tFxaaFloat dstP = posP.x - posM.x;\r\n\t\t\t\tif(!horzSpan) dstN = posM.y - posN.y;\r\n\t\t\t\tif(!horzSpan) dstP = posP.y - posM.y;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\r\n\t\t\t\tFxaaFloat spanLength = (dstP + dstN);\r\n\t\t\t\tFxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\r\n\t\t\t\tFxaaFloat spanLengthRcp = 1.0/spanLength;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaBool directionN = dstN < dstP;\r\n\t\t\t\tFxaaFloat dst = min(dstN, dstP);\r\n\t\t\t\tFxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\r\n\t\t\t\tFxaaFloat subpixG = subpixF * subpixF;\r\n\t\t\t\tFxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\r\n\t\t\t\tFxaaFloat subpixH = subpixG * fxaaQualitySubpix;\r\n\t\t/*--------------------------------------------------------------------------*/\r\n\t\t\t\tFxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\r\n\t\t\t\tFxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\r\n\t\t\t\tif(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\r\n\t\t\t\tif( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\r\n\t\t\t\t#if (FXAA_DISCARD == 1)\r\n\t\t\t\t\t\treturn FxaaTexTop(tex, posM);\r\n\t\t\t\t#else\r\n\t\t\t\t\t\treturn FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\r\n\t\t\t\t#endif\r\n\t\t}\r\n\t\t/*==========================================================================*/\r\n\t\t#endif\r\n\r\n\t\tvoid main() {\r\n\t\t\tgl_FragColor = FxaaPixelShader(\r\n\t\t\t\tvUv,\r\n\t\t\t\tvec4(0.0),\r\n\t\t\t\ttDiffuse,\r\n\t\t\t\ttDiffuse,\r\n\t\t\t\ttDiffuse,\r\n\t\t\t\tresolution,\r\n\t\t\t\tvec4(0.0),\r\n\t\t\t\tvec4(0.0),\r\n\t\t\t\tvec4(0.0),\r\n\t\t\t\t0.75,\r\n\t\t\t\t0.166,\r\n\t\t\t\t0.0833,\r\n\t\t\t\t0.0,\r\n\t\t\t\t0.0,\r\n\t\t\t\t0.0,\r\n\t\t\t\tvec4(0.0)\r\n\t\t\t);\r\n\r\n\t\t\t// TODO avoid querying texture twice for same texel\r\n\t\t\tgl_FragColor.a = texture2D(tDiffuse, vUv).a;\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { FXAAShader };\r\n"],
  "mappings": ";;;;;AAWA,IAAM,aAAa;AAAA,EAElB,UAAU;AAAA,IAET,YAAY,EAAE,OAAO,KAAK;AAAA,IAC1B,cAAc,EAAE,OAAO,IAAI,QAAS,IAAI,MAAM,IAAI,GAAI,EAAE;AAAA,EAEzD;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsshCZ;",
  "names": []
}
